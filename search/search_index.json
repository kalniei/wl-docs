{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WinLocal # Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ratione velit optio quis libero nemo? Aliquam, laboriosam. Voluptatum et quos saepe eos officia doloremque sint rerum fugit facere, natus debitis odio. WinLocal Conception # Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ratione velit optio quis libero nemo? Aliquam, laboriosam. Voluptatum et quos saepe eos officia doloremque sint rerum fugit facere, natus debitis odio.","title":"Home"},{"location":"#winlocal","text":"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ratione velit optio quis libero nemo? Aliquam, laboriosam. Voluptatum et quos saepe eos officia doloremque sint rerum fugit facere, natus debitis odio.","title":"WinLocal"},{"location":"#winlocal-conception","text":"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ratione velit optio quis libero nemo? Aliquam, laboriosam. Voluptatum et quos saepe eos officia doloremque sint rerum fugit facere, natus debitis odio.","title":"WinLocal Conception"},{"location":"account/confirmation-link/","text":"Confirmation Link # lorem","title":"Confirmation Link"},{"location":"account/confirmation-link/#confirmation-link","text":"lorem","title":"Confirmation Link"},{"location":"account/login/","text":"login # Detailed info about User assigned Plan and permissions (by adding extra query param) you can get on standard Get user Details endpoint: GET /v1/users/{id}?permissions=1 Example JSON output: { \"id\": 3, \"email\": \"rolibezfasoli@lim.bz\", \"phone\": \"(111) 111-1111\", \"roles\": [ \"ROLE_USER\" ], \"firstName\": \"Roli\", \"lastName\": \"Bezfasoli\", \"companyName\": null, \"website\": null, \"address\": null, \"address1\": null, \"city\": null, \"state\": null, \"zip\": null, \"avatarUrl\": null, \"companyLogoUrl\": \"https://winlocal-stage-client-panel.s3.us-east-2.amazonaws.com/users/3/logo/3c6ff1b8ad55c495605f08f996c62b11a60c7a06.png\", \"fbBusinessPage\": null, \"socialMedias\": { \"twitter\": null, \"facebook\": null, \"linkedin\": null, \"instagram\": null }, \"businessTypes\": [], \"activeCampaigns\": 0, \"parent\": null, \"firstLogin\": false, \"findCampaignId\": 1, \"tcAccepted\": true, \"plan\": { \"tag\": \"free\", \"slug\": \"default-free\", \"startsAt\": \"2020-05-08T10:41:53+0000\", \"endsAt\": null }, \"permissions\": [ { \"id\": 1, \"tag\": \"campaign.find.view\" }, { \"id\": 2, \"tag\": \"campaign.find.create\" }, { \"id\": 3, \"tag\": \"campaign.find.edit\" }, { \"id\": 4, \"tag\": \"campaign.find.delete\" }, { \"id\": 21, \"tag\": \"campaign.leaderboard.view\" }, { \"id\": 22, \"tag\": \"campaign.leaderboard.create\" }, { \"id\": 23, \"tag\": \"campaign.leaderboard.edit\" }, { \"id\": 24, \"tag\": \"campaign.leaderboard.delete\" } ] }","title":"Login"},{"location":"account/login/#login","text":"Detailed info about User assigned Plan and permissions (by adding extra query param) you can get on standard Get user Details endpoint: GET /v1/users/{id}?permissions=1 Example JSON output: { \"id\": 3, \"email\": \"rolibezfasoli@lim.bz\", \"phone\": \"(111) 111-1111\", \"roles\": [ \"ROLE_USER\" ], \"firstName\": \"Roli\", \"lastName\": \"Bezfasoli\", \"companyName\": null, \"website\": null, \"address\": null, \"address1\": null, \"city\": null, \"state\": null, \"zip\": null, \"avatarUrl\": null, \"companyLogoUrl\": \"https://winlocal-stage-client-panel.s3.us-east-2.amazonaws.com/users/3/logo/3c6ff1b8ad55c495605f08f996c62b11a60c7a06.png\", \"fbBusinessPage\": null, \"socialMedias\": { \"twitter\": null, \"facebook\": null, \"linkedin\": null, \"instagram\": null }, \"businessTypes\": [], \"activeCampaigns\": 0, \"parent\": null, \"firstLogin\": false, \"findCampaignId\": 1, \"tcAccepted\": true, \"plan\": { \"tag\": \"free\", \"slug\": \"default-free\", \"startsAt\": \"2020-05-08T10:41:53+0000\", \"endsAt\": null }, \"permissions\": [ { \"id\": 1, \"tag\": \"campaign.find.view\" }, { \"id\": 2, \"tag\": \"campaign.find.create\" }, { \"id\": 3, \"tag\": \"campaign.find.edit\" }, { \"id\": 4, \"tag\": \"campaign.find.delete\" }, { \"id\": 21, \"tag\": \"campaign.leaderboard.view\" }, { \"id\": 22, \"tag\": \"campaign.leaderboard.create\" }, { \"id\": 23, \"tag\": \"campaign.leaderboard.edit\" }, { \"id\": 24, \"tag\": \"campaign.leaderboard.delete\" } ] }","title":"login"},{"location":"account/logout/","text":"Logout # lorem","title":"Logout"},{"location":"account/logout/#logout","text":"lorem","title":"Logout"},{"location":"account/register/","text":"Register # Franchise User registration should be allowed on path which would allow to identify franchise the user is signing in. For franchise identification it is recommended to use Franchise slug somewhere within registration URL, for example: /my-franchise-slug/register . Franchise slug will be the Franchise ID required to be send to the backend on User registration: POST /v1/auth/register Example request JSON body: { \"franchise\": \"my-franchise-slug\", \"email\": \"johny@lim.bz\", \"password\": \"mypassword123\" }","title":"Register"},{"location":"account/register/#register","text":"Franchise User registration should be allowed on path which would allow to identify franchise the user is signing in. For franchise identification it is recommended to use Franchise slug somewhere within registration URL, for example: /my-franchise-slug/register . Franchise slug will be the Franchise ID required to be send to the backend on User registration: POST /v1/auth/register Example request JSON body: { \"franchise\": \"my-franchise-slug\", \"email\": \"johny@lim.bz\", \"password\": \"mypassword123\" }","title":"Register"},{"location":"account/reset-password/","text":"Reset Password # lorem","title":"Reset password"},{"location":"account/reset-password/#reset-password","text":"lorem","title":"Reset Password"},{"location":"admin/create-user/","text":"Create User # Admin View only. Here admin can create new users and assign them roles. Endpoint for creation user: POST /v1/users Request JSON body: { email: string password: string, enabledFbPageAccess: boolean, enabledInstagramAccess: boolean, roles: [ ROLE_USER | ROLE_RESELLER | ROLE_SUPER_ADMIN | ROLE_MULTI_USER ], } Expected output - newly created User object NOTE At this point no matter what role we create - we only can get role ROLE_USER. Other roles should either be removed or backend should be able to create other roles accounts","title":"Create User"},{"location":"admin/create-user/#create-user","text":"Admin View only. Here admin can create new users and assign them roles. Endpoint for creation user: POST /v1/users Request JSON body: { email: string password: string, enabledFbPageAccess: boolean, enabledInstagramAccess: boolean, roles: [ ROLE_USER | ROLE_RESELLER | ROLE_SUPER_ADMIN | ROLE_MULTI_USER ], } Expected output - newly created User object NOTE At this point no matter what role we create - we only can get role ROLE_USER. Other roles should either be removed or backend should be able to create other roles accounts","title":"Create User"},{"location":"admin/export-all-contacts/","text":"Export All Contacts # Admin View only. Here admin can export all contacts from all users. WIP This will export all contacts of all accounts that admin has. Pressing button \"Export Contacts\" we are sending request: GET /v1/admin/contacts","title":"Export All Contacts"},{"location":"admin/export-all-contacts/#export-all-contacts","text":"Admin View only. Here admin can export all contacts from all users. WIP This will export all contacts of all accounts that admin has. Pressing button \"Export Contacts\" we are sending request: GET /v1/admin/contacts","title":"Export All Contacts"},{"location":"admin/franchise-manager/","text":"Franchise Manager # Admin View only. Here admin can manage subscription Franchise. Franchise - it is a wrapper for users with it's own plans and special functionalities. Franchises get a signup link - all clients that register via that link belong to that franchise. Accounts can be tracked by franchise The Franchise Sign Up Link also has a default subscription plan. Add Franchise # When adding a new franchise we should : get registration/login link for franchise (user registered by that link/form will be assigned to the particular franchise). The page will display fanchase logo instead of WinLocal logo and franchise supporting image at the left of the login/registration form. For example: https://client.winlocal.xyz/?f=franchiseName choose a subscriptions plans availible for that franchise. choose a default plan for new registered users. add two letter as shortlink prefix ie. WL for shortlinks for WinLocal franchise (default franchise), SL for Support Local franchise etc. To create a new franchise: POST /v1/franchise Request JSON body: { \"name\": \"My Franchise 3\", \"prefix\": \"m3\", \"defaultPlan\": \"free\", \"plans\": [1,2,3] } At the moment of franchise creation you need to provide a list of available Plan IDs or Plan SLUGs. To get list of all available plans: GET /v1/plan Franchise name must be unique for each franchise - based on the franchise name there will be relevant slug generated. Prefix must be exactly of 2 characters length. Default plan should be declared for each franchise, it is as SLUG of Plan which is being automatically applied for newly registered franchise users. Default plan should also be included within the assigned plans array. Expected output - newly created Franchise object: { \"id\": 1, \"slug\": \"test-123\", \"name\": \"test-123\", \"prefix\": \"t3\", \"logoUrl\": null, \"signUpImageUrl\": null, \"defaultPlan\": \"free\", \"plans\": [1,2,3] } After franchise is created and we get new franchise id we are able to save added images sending origin and cropped images to endpoints: uploadUrl: upload/franchise/${franchiseId}/logo ; signupUploadUrl: upload/franchise/${franchiseId}/signup ; Request JSON body: { image: (binary) original: (binary) } Expected output: { imageUrl: \"https://winlocal-stage-client-panel.s3.us-east-2.amazonaws.com/franchise/${franchiseId}/signup/d8d13f9eab43efb6dfa8749e08d4e4407af39308.png\" } and { imageUrl: \"https://winlocal-stage-client-panel.s3.us-east-2.amazonaws.com/franchise/${franchiseId}/logo/9d4d79369b548551a2febea0d3e438b3fc01ecbc.png\" } Franchise Table # Franchise table is a simple table without backend pagination and filtration options. We refresh Plan table every 20 seconds. To get a list of all available franchises: GET /v1/franchise Example response without plans: [ { \"id\": 2, \"slug\": \"my-franchise\", \"name\": \"My Franchise\", \"prefix\": \"mf\", \"defaultPlan\": \"free\", logoUrl: \"https://supportlocal-stage.lim.bz/img/support_local.png\", signUpImageUrl: \"https://winlocal-stage-client-panel.s3.us-east-2.amazonaws.com/franchise/1/signup/game-screen1.png\" } ] GET /v1/franchise?plans=1 Example response with plans: [ { \"id\": 2, \"slug\": \"my-franchise\", \"name\": \"My Franchise\", \"prefix\": \"mf\", \"defaultPlan\": \"free\", logoUrl: \"https://supportlocal-stage.lim.bz/img/support_local.png\", signUpImageUrl: \"https://winlocal-stage-client-panel.s3.us-east-2.amazonaws.com/franchise/1/signup/game-screen1.png\" \"plans\": [ { \"id\": 1, \"tag\": \"free\", \"name\": \"Plan FREE\", \"stripeId\": null }, { \"id\": 2, \"tag\": \"standard\", \"name\": \"Plan STANDARD\", \"stripeId\": \"membership_monthly\" }, { \"id\": 3, \"tag\": \"unlimited\", \"name\": \"Plan FREE and UNLIMITED\", \"stripeId\": null } ] } ] Get single franchise details: GET /v1/franchise/{slugId} Example response: { \"id\": 2, \"slug\": \"my-franchise\", \"name\": \"My Franchise\", \"prefix\": \"mf\", logoUrl: \"https://supportlocal-stage.lim.bz/img/support_local.png\", signUpImageUrl: \"https://winlocal-stage-client-panel.s3.us-east-2.amazonaws.com/franchise/1/signup/game-screen1.png\" \"defaultPlan\": \"free\" } All endpoints above accepts extra query parameters (note: within URL query path): - plans -> if set to 1 will add to franchise output, plan details assigned to franchise; - permissions -> requires also plans=1 if set to 1 will add permission list to plans assigned to each franchise. Edit Franchise # To update existing franchise: PUT /v1/franchise Request JSON body: { \"id\": 4, \"slug\": \"my-franchise-3\", \"name\": \"My Franchise 3\", \"prefix\": \"m3\", \"logoUrl\": <urlForImage>, \"signUpImageUrl\": <urlForImage>, \"defaultPlan\": \"free\", \"plans\": [ { \"id\": 1, \"tag\": \"free\", \"slug\": \"default-free\", \"name\": \"Plan FREE\", \"stripeId\": null, \"period\": null }, { \"id\": 2, \"tag\": \"paid\", \"slug\": \"default-paid\", \"name\": \"Plan STANDARD\", \"stripeId\": \"membership_monthly\", \"period\": \"month\" } ] } You can update franchise details as above. As a plan list you can forward an array of plan IDs or SLUGs (as on creation example) or forward an array of full Plan objects which must include at least Plan ID parameter. You can change uploaded images using the same endpoints as for adding new franchise. Note: - if you don't change the image , the image will not be updated.","title":"Franchise Manager"},{"location":"admin/franchise-manager/#franchise-manager","text":"Admin View only. Here admin can manage subscription Franchise. Franchise - it is a wrapper for users with it's own plans and special functionalities. Franchises get a signup link - all clients that register via that link belong to that franchise. Accounts can be tracked by franchise The Franchise Sign Up Link also has a default subscription plan.","title":"Franchise Manager"},{"location":"admin/franchise-manager/#add-franchise","text":"When adding a new franchise we should : get registration/login link for franchise (user registered by that link/form will be assigned to the particular franchise). The page will display fanchase logo instead of WinLocal logo and franchise supporting image at the left of the login/registration form. For example: https://client.winlocal.xyz/?f=franchiseName choose a subscriptions plans availible for that franchise. choose a default plan for new registered users. add two letter as shortlink prefix ie. WL for shortlinks for WinLocal franchise (default franchise), SL for Support Local franchise etc. To create a new franchise: POST /v1/franchise Request JSON body: { \"name\": \"My Franchise 3\", \"prefix\": \"m3\", \"defaultPlan\": \"free\", \"plans\": [1,2,3] } At the moment of franchise creation you need to provide a list of available Plan IDs or Plan SLUGs. To get list of all available plans: GET /v1/plan Franchise name must be unique for each franchise - based on the franchise name there will be relevant slug generated. Prefix must be exactly of 2 characters length. Default plan should be declared for each franchise, it is as SLUG of Plan which is being automatically applied for newly registered franchise users. Default plan should also be included within the assigned plans array. Expected output - newly created Franchise object: { \"id\": 1, \"slug\": \"test-123\", \"name\": \"test-123\", \"prefix\": \"t3\", \"logoUrl\": null, \"signUpImageUrl\": null, \"defaultPlan\": \"free\", \"plans\": [1,2,3] } After franchise is created and we get new franchise id we are able to save added images sending origin and cropped images to endpoints: uploadUrl: upload/franchise/${franchiseId}/logo ; signupUploadUrl: upload/franchise/${franchiseId}/signup ; Request JSON body: { image: (binary) original: (binary) } Expected output: { imageUrl: \"https://winlocal-stage-client-panel.s3.us-east-2.amazonaws.com/franchise/${franchiseId}/signup/d8d13f9eab43efb6dfa8749e08d4e4407af39308.png\" } and { imageUrl: \"https://winlocal-stage-client-panel.s3.us-east-2.amazonaws.com/franchise/${franchiseId}/logo/9d4d79369b548551a2febea0d3e438b3fc01ecbc.png\" }","title":"Add Franchise"},{"location":"admin/franchise-manager/#franchise-table","text":"Franchise table is a simple table without backend pagination and filtration options. We refresh Plan table every 20 seconds. To get a list of all available franchises: GET /v1/franchise Example response without plans: [ { \"id\": 2, \"slug\": \"my-franchise\", \"name\": \"My Franchise\", \"prefix\": \"mf\", \"defaultPlan\": \"free\", logoUrl: \"https://supportlocal-stage.lim.bz/img/support_local.png\", signUpImageUrl: \"https://winlocal-stage-client-panel.s3.us-east-2.amazonaws.com/franchise/1/signup/game-screen1.png\" } ] GET /v1/franchise?plans=1 Example response with plans: [ { \"id\": 2, \"slug\": \"my-franchise\", \"name\": \"My Franchise\", \"prefix\": \"mf\", \"defaultPlan\": \"free\", logoUrl: \"https://supportlocal-stage.lim.bz/img/support_local.png\", signUpImageUrl: \"https://winlocal-stage-client-panel.s3.us-east-2.amazonaws.com/franchise/1/signup/game-screen1.png\" \"plans\": [ { \"id\": 1, \"tag\": \"free\", \"name\": \"Plan FREE\", \"stripeId\": null }, { \"id\": 2, \"tag\": \"standard\", \"name\": \"Plan STANDARD\", \"stripeId\": \"membership_monthly\" }, { \"id\": 3, \"tag\": \"unlimited\", \"name\": \"Plan FREE and UNLIMITED\", \"stripeId\": null } ] } ] Get single franchise details: GET /v1/franchise/{slugId} Example response: { \"id\": 2, \"slug\": \"my-franchise\", \"name\": \"My Franchise\", \"prefix\": \"mf\", logoUrl: \"https://supportlocal-stage.lim.bz/img/support_local.png\", signUpImageUrl: \"https://winlocal-stage-client-panel.s3.us-east-2.amazonaws.com/franchise/1/signup/game-screen1.png\" \"defaultPlan\": \"free\" } All endpoints above accepts extra query parameters (note: within URL query path): - plans -> if set to 1 will add to franchise output, plan details assigned to franchise; - permissions -> requires also plans=1 if set to 1 will add permission list to plans assigned to each franchise.","title":"Franchise Table"},{"location":"admin/franchise-manager/#edit-franchise","text":"To update existing franchise: PUT /v1/franchise Request JSON body: { \"id\": 4, \"slug\": \"my-franchise-3\", \"name\": \"My Franchise 3\", \"prefix\": \"m3\", \"logoUrl\": <urlForImage>, \"signUpImageUrl\": <urlForImage>, \"defaultPlan\": \"free\", \"plans\": [ { \"id\": 1, \"tag\": \"free\", \"slug\": \"default-free\", \"name\": \"Plan FREE\", \"stripeId\": null, \"period\": null }, { \"id\": 2, \"tag\": \"paid\", \"slug\": \"default-paid\", \"name\": \"Plan STANDARD\", \"stripeId\": \"membership_monthly\", \"period\": \"month\" } ] } You can update franchise details as above. As a plan list you can forward an array of plan IDs or SLUGs (as on creation example) or forward an array of full Plan objects which must include at least Plan ID parameter. You can change uploaded images using the same endpoints as for adding new franchise. Note: - if you don't change the image , the image will not be updated.","title":"Edit Franchise"},{"location":"admin/promo-code-manager/","text":"Promo Code Manager # Admin View only. Here admin can manage subscription coupons. Coupons can be used for activation of subscription without entering credit card. Coupons can not be used for paying for the campaign. Add Coupon # Request for creating new coupon: POST /v1/coupons Request JSON body: { \"type\": multi_use | one_use, \"value\": number, \"valueType\": percentage | currency | days, \"code\": string | undefined, } CODE : required_if: type=multi_use otherwise is generate Coupons Table # Paginated list of all coupons. Pagination comes from the backend side. We refresh Coupons table every 20 seconds. By default pagination is set to 10 records. No columns are sortable. No columns have filters inside the table. GET /v1/coupons Available JSON params: { page: 1 itemsPerPage: 10 showAllRecords: 0 | 1 } Expected output: { data: [ { code: \"WL30PROMO\" id: 1 type: \"multi_use\" userCoupons: [] value: 30 valueType: \"days\" } ] state: { fields: [] filterBy: null filterValue: null filters: [] itemsCount: 10 itemsPerPage: 10 joins: [] page: 1 showAllRecords: false sortBy: null sortDesc: false totalItems: 12 totalPages: 2 } } We do have additional ability to assign coupon to user, but it is not used now. POST /v1/users/{userId}/coupons/{couponId} Delete Coupon # Click \"Delete Account\" icon will trigger conformation modal. Note: coupon will be deleted with user associations. Once you confirm your action the delete request is being sent: DELETE /v1/coupons/{id} Expected output: { status: true }","title":"Promo Code Manager"},{"location":"admin/promo-code-manager/#promo-code-manager","text":"Admin View only. Here admin can manage subscription coupons. Coupons can be used for activation of subscription without entering credit card. Coupons can not be used for paying for the campaign.","title":"Promo Code Manager"},{"location":"admin/promo-code-manager/#add-coupon","text":"Request for creating new coupon: POST /v1/coupons Request JSON body: { \"type\": multi_use | one_use, \"value\": number, \"valueType\": percentage | currency | days, \"code\": string | undefined, } CODE : required_if: type=multi_use otherwise is generate","title":"Add Coupon"},{"location":"admin/promo-code-manager/#coupons-table","text":"Paginated list of all coupons. Pagination comes from the backend side. We refresh Coupons table every 20 seconds. By default pagination is set to 10 records. No columns are sortable. No columns have filters inside the table. GET /v1/coupons Available JSON params: { page: 1 itemsPerPage: 10 showAllRecords: 0 | 1 } Expected output: { data: [ { code: \"WL30PROMO\" id: 1 type: \"multi_use\" userCoupons: [] value: 30 valueType: \"days\" } ] state: { fields: [] filterBy: null filterValue: null filters: [] itemsCount: 10 itemsPerPage: 10 joins: [] page: 1 showAllRecords: false sortBy: null sortDesc: false totalItems: 12 totalPages: 2 } } We do have additional ability to assign coupon to user, but it is not used now. POST /v1/users/{userId}/coupons/{couponId}","title":"Coupons Table"},{"location":"admin/promo-code-manager/#delete-coupon","text":"Click \"Delete Account\" icon will trigger conformation modal. Note: coupon will be deleted with user associations. Once you confirm your action the delete request is being sent: DELETE /v1/coupons/{id} Expected output: { status: true }","title":"Delete Coupon"},{"location":"admin/subscription-plans/","text":"Subscriptions Plans # Admin View only. Here admin can manage subscription plans. Subscription plan - it is mainly a set of permissions and rules that can be added to specific franchises in order to limit users abilities and/or get specific pay according to these abilities. One franchise can have few subscription plans and those plans can be switched. Add Plan # Request for creating new plan: POST /v1/plan Request JSON body: { tag: 'free' | 'paid' | 'unlimited', slug: string | undefined, stripeId: string | undefined, period: string | null, trialPeriodDays: number | undefined, <not used for now> period: 'month' | 'year' | null, <not used for now> price: this.planTag === 'paid' ? { amount: number, currency: 'USD', formatted: { decimal: number, money: '$' + number, }, } : undefined, permissions: [number, number, number], }, SLUG is an optional parameter - if not provided - will be generated based on plan's NAME. Although, it is an optional parameter, it must be unique within all available plans. STRIPE ID is required only if the newly created plan is of TAG=paid and it must be a valid Stripe Plan ID received on plan registration for example: via Stripe Panel. Otherwise, it can be set to null or completely omitted from the payload. PERIOD must be one of: month , year or null . It determines how long the plan will remain valid. For example all plans with TAGs free or unlimited will very likely require PERIOD=null while plans with TAG paid will require PERIOD=month for monthly subscriptions or year for annual ones. PERMISSIONS should be an array list of assigned permissions. It can be an array of permissions IDs or full permission objects (at least permission ID is mandatory). Expected output - object with newly created plan: { id: 20 name: \"Test Plan\" period: null price: { amount: \"0\", currency: \"USD\", formatted: { decimal: \"0\", money: \"$0.00\" } } slug: \"test\" stripeId: null tag: \"free\" trialPeriodDays: 0 } We get available permissions form here: GET /v1/permissions JSON response with all available permissions: [{ \"id\": 44, \"tag\": \"account.main.view\" }, { \"id\": 45, \"tag\": \"account.profile.view\" }, { \"id\": 47, \"tag\": \"account.shortLinks.view\" }, { \"id\": 46, \"tag\": \"account.subscription.view\" }, { \"id\": 42, \"tag\": \"campaign.builder.view\" }, { \"id\": 56, \"tag\": \"campaign.email.create\" }, { \"id\": 57, \"tag\": \"campaign.email.delete\" }, { \"id\": 58, \"tag\": \"campaign.email.edit\" }, { \"id\": 59, \"tag\": \"campaign.email.view\" }, { \"id\": 60, \"tag\": \"campaign.find.create\" }, { \"id\": 61, \"tag\": \"campaign.find.delete\" }, { \"id\": 62, \"tag\": \"campaign.find.edit\" }, { \"id\": 80, \"tag\": \"campaign.find.multiple_keywords\" }, { \"id\": 63, \"tag\": \"campaign.find.view\" }, { \"id\": 64, \"tag\": \"campaign.leaderboard.create\" }, { \"id\": 65, \"tag\": \"campaign.leaderboard.delete\" }, { \"id\": 66, \"tag\": \"campaign.leaderboard.edit\" }, { \"id\": 67, \"tag\": \"campaign.leaderboard.view\" }, { \"id\": 43, \"tag\": \"campaign.manager.view\" }, { \"id\": 68, \"tag\": \"campaign.mixed.create\" }, { \"id\": 69, \"tag\": \"campaign.mixed.delete\" }, { \"id\": 70, \"tag\": \"campaign.mixed.edit\" }, { \"id\": 71, \"tag\": \"campaign.mixed.view\" }, { \"id\": 72, \"tag\": \"campaign.sister.create\" }, { \"id\": 73, \"tag\": \"campaign.sister.delete\" }, { \"id\": 74, \"tag\": \"campaign.sister.edit\" }, { \"id\": 75, \"tag\": \"campaign.sister.view\" }, { \"id\": 76, \"tag\": \"campaign.social.create\" }, { \"id\": 77, \"tag\": \"campaign.social.delete\" }, { \"id\": 78, \"tag\": \"campaign.social.edit\" }, { \"id\": 79, \"tag\": \"campaign.social.view\" }, { \"id\": 52, \"tag\": \"contact.engagements.view\" }, { \"id\": 50, \"tag\": \"contact.main.create\" }, { \"id\": 51, \"tag\": \"contact.main.update\" }, { \"id\": 49, \"tag\": \"contact.main.view\" }, { \"id\": 41, \"tag\": \"dashboard.main.view\" }, { \"id\": 48, \"tag\": \"onboarding.billing.view\" }, { \"id\": 54, \"tag\": \"staffMember.main.create\" }, { \"id\": 53, \"tag\": \"staffMember.main.view\" }, { \"id\": 55, \"tag\": \"winner.main.view\" }] Plans Table # Plans table is a simple table without backend pagination and filtration options. We refresh Plan table every 20 seconds. To get list of all available plans: GET /v1/plan Please note: This endpoint will manage the results of the response. Users granted SUPER ADMIN role will get a full list of all available plans while users assigned to a Franchise will get a list of all assigned plans to their Franchise only, and other users will get a list of default plans only. To get single Plan details: GET /v1/plan/{idSlug} Please note: All of the endpoints above will accept extra query parameter (as URL query param): permissions -> if set to 1 will add a list of assigned permissions to the plan output; Example of Plan Object response: (will be array of objects for all plans request) { \"id\": 1, \"tag\": \"free\", \"slug\": \"default-free\", \"name\": \"Plan FREE\", \"stripeId\": null, \"period\": null, \"trialPeriodDays\": 0, \"price\": { \"amount\": \"0\", \"currency\": \"USD\", \"formatted\": { \"decimal\": \"0.00\", \"money\": \"$0.00\" } }, \"permissions\": [ { \"id\": 1, \"tag\": \"campaign.find.view\" }, { \"id\": 2, \"tag\": \"campaign.find.create\" }, { \"id\": 3, \"tag\": \"campaign.find.edit\" }, ] <optional> } Edit Plan # Click on the \"Edit plan\" icon triggers open edit modal. There is only a plan name and a list of permissions able to be edited. PUT /v1/plan Request JSON body: { id: 1, name: \"My Plan new name\", permissions: [1,2] } Please note: Although the plan name may change, the slug generated at plan creation will always remain the same.","title":"Subscription Plans"},{"location":"admin/subscription-plans/#subscriptions-plans","text":"Admin View only. Here admin can manage subscription plans. Subscription plan - it is mainly a set of permissions and rules that can be added to specific franchises in order to limit users abilities and/or get specific pay according to these abilities. One franchise can have few subscription plans and those plans can be switched.","title":"Subscriptions Plans"},{"location":"admin/subscription-plans/#add-plan","text":"Request for creating new plan: POST /v1/plan Request JSON body: { tag: 'free' | 'paid' | 'unlimited', slug: string | undefined, stripeId: string | undefined, period: string | null, trialPeriodDays: number | undefined, <not used for now> period: 'month' | 'year' | null, <not used for now> price: this.planTag === 'paid' ? { amount: number, currency: 'USD', formatted: { decimal: number, money: '$' + number, }, } : undefined, permissions: [number, number, number], }, SLUG is an optional parameter - if not provided - will be generated based on plan's NAME. Although, it is an optional parameter, it must be unique within all available plans. STRIPE ID is required only if the newly created plan is of TAG=paid and it must be a valid Stripe Plan ID received on plan registration for example: via Stripe Panel. Otherwise, it can be set to null or completely omitted from the payload. PERIOD must be one of: month , year or null . It determines how long the plan will remain valid. For example all plans with TAGs free or unlimited will very likely require PERIOD=null while plans with TAG paid will require PERIOD=month for monthly subscriptions or year for annual ones. PERMISSIONS should be an array list of assigned permissions. It can be an array of permissions IDs or full permission objects (at least permission ID is mandatory). Expected output - object with newly created plan: { id: 20 name: \"Test Plan\" period: null price: { amount: \"0\", currency: \"USD\", formatted: { decimal: \"0\", money: \"$0.00\" } } slug: \"test\" stripeId: null tag: \"free\" trialPeriodDays: 0 } We get available permissions form here: GET /v1/permissions JSON response with all available permissions: [{ \"id\": 44, \"tag\": \"account.main.view\" }, { \"id\": 45, \"tag\": \"account.profile.view\" }, { \"id\": 47, \"tag\": \"account.shortLinks.view\" }, { \"id\": 46, \"tag\": \"account.subscription.view\" }, { \"id\": 42, \"tag\": \"campaign.builder.view\" }, { \"id\": 56, \"tag\": \"campaign.email.create\" }, { \"id\": 57, \"tag\": \"campaign.email.delete\" }, { \"id\": 58, \"tag\": \"campaign.email.edit\" }, { \"id\": 59, \"tag\": \"campaign.email.view\" }, { \"id\": 60, \"tag\": \"campaign.find.create\" }, { \"id\": 61, \"tag\": \"campaign.find.delete\" }, { \"id\": 62, \"tag\": \"campaign.find.edit\" }, { \"id\": 80, \"tag\": \"campaign.find.multiple_keywords\" }, { \"id\": 63, \"tag\": \"campaign.find.view\" }, { \"id\": 64, \"tag\": \"campaign.leaderboard.create\" }, { \"id\": 65, \"tag\": \"campaign.leaderboard.delete\" }, { \"id\": 66, \"tag\": \"campaign.leaderboard.edit\" }, { \"id\": 67, \"tag\": \"campaign.leaderboard.view\" }, { \"id\": 43, \"tag\": \"campaign.manager.view\" }, { \"id\": 68, \"tag\": \"campaign.mixed.create\" }, { \"id\": 69, \"tag\": \"campaign.mixed.delete\" }, { \"id\": 70, \"tag\": \"campaign.mixed.edit\" }, { \"id\": 71, \"tag\": \"campaign.mixed.view\" }, { \"id\": 72, \"tag\": \"campaign.sister.create\" }, { \"id\": 73, \"tag\": \"campaign.sister.delete\" }, { \"id\": 74, \"tag\": \"campaign.sister.edit\" }, { \"id\": 75, \"tag\": \"campaign.sister.view\" }, { \"id\": 76, \"tag\": \"campaign.social.create\" }, { \"id\": 77, \"tag\": \"campaign.social.delete\" }, { \"id\": 78, \"tag\": \"campaign.social.edit\" }, { \"id\": 79, \"tag\": \"campaign.social.view\" }, { \"id\": 52, \"tag\": \"contact.engagements.view\" }, { \"id\": 50, \"tag\": \"contact.main.create\" }, { \"id\": 51, \"tag\": \"contact.main.update\" }, { \"id\": 49, \"tag\": \"contact.main.view\" }, { \"id\": 41, \"tag\": \"dashboard.main.view\" }, { \"id\": 48, \"tag\": \"onboarding.billing.view\" }, { \"id\": 54, \"tag\": \"staffMember.main.create\" }, { \"id\": 53, \"tag\": \"staffMember.main.view\" }, { \"id\": 55, \"tag\": \"winner.main.view\" }]","title":"Add Plan"},{"location":"admin/subscription-plans/#plans-table","text":"Plans table is a simple table without backend pagination and filtration options. We refresh Plan table every 20 seconds. To get list of all available plans: GET /v1/plan Please note: This endpoint will manage the results of the response. Users granted SUPER ADMIN role will get a full list of all available plans while users assigned to a Franchise will get a list of all assigned plans to their Franchise only, and other users will get a list of default plans only. To get single Plan details: GET /v1/plan/{idSlug} Please note: All of the endpoints above will accept extra query parameter (as URL query param): permissions -> if set to 1 will add a list of assigned permissions to the plan output; Example of Plan Object response: (will be array of objects for all plans request) { \"id\": 1, \"tag\": \"free\", \"slug\": \"default-free\", \"name\": \"Plan FREE\", \"stripeId\": null, \"period\": null, \"trialPeriodDays\": 0, \"price\": { \"amount\": \"0\", \"currency\": \"USD\", \"formatted\": { \"decimal\": \"0.00\", \"money\": \"$0.00\" } }, \"permissions\": [ { \"id\": 1, \"tag\": \"campaign.find.view\" }, { \"id\": 2, \"tag\": \"campaign.find.create\" }, { \"id\": 3, \"tag\": \"campaign.find.edit\" }, ] <optional> }","title":"Plans Table"},{"location":"admin/subscription-plans/#edit-plan","text":"Click on the \"Edit plan\" icon triggers open edit modal. There is only a plan name and a list of permissions able to be edited. PUT /v1/plan Request JSON body: { id: 1, name: \"My Plan new name\", permissions: [1,2] } Please note: Although the plan name may change, the slug generated at plan creation will always remain the same.","title":"Edit Plan"},{"location":"admin/user-accounts/","text":"User Accounts # Admin View only. Here admin can manage accounts. Find Account # The Search filters, that are filtering the Accounts Table Email Address First Name Last Name Company Name Company Keyword Status - dropdown, allowed values: All , Active , Inactive Button Search will trigger request to Api: GET /v1/admin/users with optional filters params: filters[]= email: string; - operand \"l\" firstName: string; - operand \"l\" lastName: string; - operand \"l\" companyName: string; - operand \"l\" companyKeyword: string; - operand \"l\" status: string; - operand \"eq\" Example of created link: GET /v1/admin/users?filters[]=email,l,test@lim.bz,&filters[]=firstName,l,testFirst,&filters[]=lastName,l,testLast,&filters[]=companyName,l,testInc,&filters[]=companyKeyword,l,banana,&filters[]=status,eq,active Accounts Table # Paginated list of all users, created under current Admin user. We refresh Accounts table every 20 seconds. By default pagination is set to 10 records. All columns are sortable. No columns have filters inside the table. We use this route for getting accounts: GET /v1/admin/users Optional parameter for pagination: page: number; itemsPerPage: number; - 5 | 10 | 15 showAllRecords: boolean; sortBy: string; sortDesc: boolean; Example of created link: GET /v1/admin/users?page=1&itemsPerPage=10&showAllRecords=0&sortBy=lastName&sortDesc=1 Expected output: { data: [ { companyKeyword: \"test\" companyName: \"Test Inc\" email: \"test@lim.bz\" fbBusinessPage: 1111 instagramId: 1111 firstName: \"Test\" id: 1 lastName: \"Test\" status: \"active\" } ... ], state: { fields: [] filterBy: null filterValue: null filters: [] itemsCount: 10 itemsPerPage: 10 joins: [] page: 1 showAllRecords: false sortBy: \"lastName\" sortDesc: true totalItems: 463 totalPages: 47 } } Impersonate User # Option to log in into users account. GET /v1/users/${id}/?permissions=1 After successful response we do all actions like login user. see: user login for more details Note - in Store we keep parentUserId\" ${adminId} and in Local Storage - impersonate: ${adminEmail} . It allows us to go back to admin (same actions as impersonate - just use id in Store) Edit Account # On Edit Account the modal with account profile info is being opened. Api for getting full User Object: GET /v1/users/${id} Expected output: { activeCampaigns: 0 address: \"NA\" address1: null avatarUrl: null businessTypes: [{ id: 8, name: \"Retail Stores & Clubs\" }] city: \"Stamford\" companyLogoUrl: \"https://winlocal-stage-client-panel.s3.us-east-2.amazonaws.com/users/48/logo/7747763fbdc3f595adb3cfe5fd4d5ffcd093d3b8.png\" companyName: \"Bab\" defaultAdCategory: \"regular\" domains: [{ id: 55, domain: \"30.d.lnx.bz\", shorteners: [ \"https:\\/\\/30.d.lnx.bz\\/rffef\", \"https:\\/\\/30.d.lnx.bz\\/defmem-48\", \"https:\\/\\/30.d.lnx.bz\\/cd9\" ] }], email: \"as@lim.bz\" enabledFbPageAccess: false enabledInstagramAccess: false fbBusinessPage: null findCampaignId: 3257 firstLogin: false firstName: \"Half\" franchise: null id: 48 instagramId: null lastName: \"Caf\u00e9\" leaderboardCampaignId: null logoAspectRatio: \"companyLogo\" logoBgColor: \"#ffffff\" parent: null phone: \"(111) 111-1111\" plan: { tag: \"paid\", slug: \"default-paid\", startsAt: \"2020-11-04T13:18:43+0000\", endsAt: \"2020-12-04T13:18:43+0000\" } roles: [\"ROLE_USER\"] socialMedias: { twitter: null, facebook: null, linkedin: null, instagram: null } state: \"CT\" tcAccepted: true website: null zip: \"06901\" } Here we have three Admin ONLY settings: \"Use this email address for ad campaign testing\" If switch is set to true - the property of User object testingEmail is set to the same value as field email . If switch is set to false - the new input becomes visible \"Email address for ad testing\" and property of User object is testingEmail . \"Enable Access to Facebook Followers\" Default - false . If switch is set to true - this specific user will have a \"Facebook Followers\" option for targeting contacts in Campaign Builder. Property od User Object: enabledFbPageAccess . Please note: Admin is responsible for consciously setting this flag ONLY when a specific user has fbBusinessPage id set. \"Enable Access to Instagram Followers\" Default - false . If switch is set to true - this specific user will have a \"Instagram Followers\" option for targeting contacts in Campaign Builder. Property od User Object: enabledInstagramAccess . Please note: Admin is responsible for consciously setting this flag ONLY when specific user has instagramId set. Those, and all additional fields will be send in the object by Api: PUT /v1/users/${id} Expected output: full User object Change Password # Admin can also change password of its users. The current password is not required. The route for Admins change of password: POST /v1/admin/users/${id}/changePassword As parameter we send: newPassword: \"12345678\" Expected output: { password_changed: [true] } QR Codes # Click on icon \"QR codes\" triggers open the modal \"QR CODES FOR CAMPAIGNS\" Here we are asking Api to give us all users campaign with types find and leaderboard (SMS campaign and Push Your Limits) GET /v1/admin/users/${id}/campaigns?filters[]=type,in,find,leaderboard&page=1&itemsPerPage=3&showAllRecords=0 Expected output: { data: [ { adBuilder: [] contactListIds: [] created_at: \"2020-11-03T13:15:09+0000\" customLink: null emailTemplate: [] endDate: null footerText: null gameUrl: \"https://2E.d.lnx.bz/thyhyh\" geoCity: null geoLat: null geoLong: null geoRadius: null geoState: null geoZip: null id: 3255 isProcessingContacts: false keyword: \"thyhyh\" logoUrl: null managerAvatar: null maxCostPerDay: 0 name: \"SMS Campaign\" peopleTargetingQty: null prizeTypes: [] selectedGames: [] startDate: \"2020-11-03T13:15:02+0000\" status: \"active\" targetAllContacts: false targetingType: \"none\" totalContacts: 0 type: \"find\" updated_at: \"2020-11-03T13:15:13+0000\" useDefaultPrizes: true } ] state: { fields: [] filterBy: null filterValue: null filters: [ \"type,in,find,leaderboard\" ] itemsCount: 2 itemsPerPage: 3 joins: [] page: 1 showAllRecords: false sortBy: null sortDesc: false totalItems: 2 totalPages: 1 } } From Campaign Object in this View we only use name , type and gameUrl We use component \"QrCodeGenerator\" for creating QR code for campaign gameUrl Delete Account # Click \"Delete Account\" icon will trigger conformation modal. Once you confirm your action the delete request is being sent: DELETE /v1/admin/users/${id} Expected output: { data: null messages: [\"User Test Test (test@lifeinmobile.com) has been successfully deleted.\"] }","title":"User Accounts"},{"location":"admin/user-accounts/#user-accounts","text":"Admin View only. Here admin can manage accounts.","title":"User Accounts"},{"location":"admin/user-accounts/#find-account","text":"The Search filters, that are filtering the Accounts Table Email Address First Name Last Name Company Name Company Keyword Status - dropdown, allowed values: All , Active , Inactive Button Search will trigger request to Api: GET /v1/admin/users with optional filters params: filters[]= email: string; - operand \"l\" firstName: string; - operand \"l\" lastName: string; - operand \"l\" companyName: string; - operand \"l\" companyKeyword: string; - operand \"l\" status: string; - operand \"eq\" Example of created link: GET /v1/admin/users?filters[]=email,l,test@lim.bz,&filters[]=firstName,l,testFirst,&filters[]=lastName,l,testLast,&filters[]=companyName,l,testInc,&filters[]=companyKeyword,l,banana,&filters[]=status,eq,active","title":"Find Account"},{"location":"admin/user-accounts/#accounts-table","text":"Paginated list of all users, created under current Admin user. We refresh Accounts table every 20 seconds. By default pagination is set to 10 records. All columns are sortable. No columns have filters inside the table. We use this route for getting accounts: GET /v1/admin/users Optional parameter for pagination: page: number; itemsPerPage: number; - 5 | 10 | 15 showAllRecords: boolean; sortBy: string; sortDesc: boolean; Example of created link: GET /v1/admin/users?page=1&itemsPerPage=10&showAllRecords=0&sortBy=lastName&sortDesc=1 Expected output: { data: [ { companyKeyword: \"test\" companyName: \"Test Inc\" email: \"test@lim.bz\" fbBusinessPage: 1111 instagramId: 1111 firstName: \"Test\" id: 1 lastName: \"Test\" status: \"active\" } ... ], state: { fields: [] filterBy: null filterValue: null filters: [] itemsCount: 10 itemsPerPage: 10 joins: [] page: 1 showAllRecords: false sortBy: \"lastName\" sortDesc: true totalItems: 463 totalPages: 47 } }","title":"Accounts Table"},{"location":"admin/user-accounts/#impersonate-user","text":"Option to log in into users account. GET /v1/users/${id}/?permissions=1 After successful response we do all actions like login user. see: user login for more details Note - in Store we keep parentUserId\" ${adminId} and in Local Storage - impersonate: ${adminEmail} . It allows us to go back to admin (same actions as impersonate - just use id in Store)","title":"Impersonate User"},{"location":"admin/user-accounts/#edit-account","text":"On Edit Account the modal with account profile info is being opened. Api for getting full User Object: GET /v1/users/${id} Expected output: { activeCampaigns: 0 address: \"NA\" address1: null avatarUrl: null businessTypes: [{ id: 8, name: \"Retail Stores & Clubs\" }] city: \"Stamford\" companyLogoUrl: \"https://winlocal-stage-client-panel.s3.us-east-2.amazonaws.com/users/48/logo/7747763fbdc3f595adb3cfe5fd4d5ffcd093d3b8.png\" companyName: \"Bab\" defaultAdCategory: \"regular\" domains: [{ id: 55, domain: \"30.d.lnx.bz\", shorteners: [ \"https:\\/\\/30.d.lnx.bz\\/rffef\", \"https:\\/\\/30.d.lnx.bz\\/defmem-48\", \"https:\\/\\/30.d.lnx.bz\\/cd9\" ] }], email: \"as@lim.bz\" enabledFbPageAccess: false enabledInstagramAccess: false fbBusinessPage: null findCampaignId: 3257 firstLogin: false firstName: \"Half\" franchise: null id: 48 instagramId: null lastName: \"Caf\u00e9\" leaderboardCampaignId: null logoAspectRatio: \"companyLogo\" logoBgColor: \"#ffffff\" parent: null phone: \"(111) 111-1111\" plan: { tag: \"paid\", slug: \"default-paid\", startsAt: \"2020-11-04T13:18:43+0000\", endsAt: \"2020-12-04T13:18:43+0000\" } roles: [\"ROLE_USER\"] socialMedias: { twitter: null, facebook: null, linkedin: null, instagram: null } state: \"CT\" tcAccepted: true website: null zip: \"06901\" } Here we have three Admin ONLY settings: \"Use this email address for ad campaign testing\" If switch is set to true - the property of User object testingEmail is set to the same value as field email . If switch is set to false - the new input becomes visible \"Email address for ad testing\" and property of User object is testingEmail . \"Enable Access to Facebook Followers\" Default - false . If switch is set to true - this specific user will have a \"Facebook Followers\" option for targeting contacts in Campaign Builder. Property od User Object: enabledFbPageAccess . Please note: Admin is responsible for consciously setting this flag ONLY when a specific user has fbBusinessPage id set. \"Enable Access to Instagram Followers\" Default - false . If switch is set to true - this specific user will have a \"Instagram Followers\" option for targeting contacts in Campaign Builder. Property od User Object: enabledInstagramAccess . Please note: Admin is responsible for consciously setting this flag ONLY when specific user has instagramId set. Those, and all additional fields will be send in the object by Api: PUT /v1/users/${id} Expected output: full User object","title":"Edit Account"},{"location":"admin/user-accounts/#change-password","text":"Admin can also change password of its users. The current password is not required. The route for Admins change of password: POST /v1/admin/users/${id}/changePassword As parameter we send: newPassword: \"12345678\" Expected output: { password_changed: [true] }","title":"Change Password"},{"location":"admin/user-accounts/#qr-codes","text":"Click on icon \"QR codes\" triggers open the modal \"QR CODES FOR CAMPAIGNS\" Here we are asking Api to give us all users campaign with types find and leaderboard (SMS campaign and Push Your Limits) GET /v1/admin/users/${id}/campaigns?filters[]=type,in,find,leaderboard&page=1&itemsPerPage=3&showAllRecords=0 Expected output: { data: [ { adBuilder: [] contactListIds: [] created_at: \"2020-11-03T13:15:09+0000\" customLink: null emailTemplate: [] endDate: null footerText: null gameUrl: \"https://2E.d.lnx.bz/thyhyh\" geoCity: null geoLat: null geoLong: null geoRadius: null geoState: null geoZip: null id: 3255 isProcessingContacts: false keyword: \"thyhyh\" logoUrl: null managerAvatar: null maxCostPerDay: 0 name: \"SMS Campaign\" peopleTargetingQty: null prizeTypes: [] selectedGames: [] startDate: \"2020-11-03T13:15:02+0000\" status: \"active\" targetAllContacts: false targetingType: \"none\" totalContacts: 0 type: \"find\" updated_at: \"2020-11-03T13:15:13+0000\" useDefaultPrizes: true } ] state: { fields: [] filterBy: null filterValue: null filters: [ \"type,in,find,leaderboard\" ] itemsCount: 2 itemsPerPage: 3 joins: [] page: 1 showAllRecords: false sortBy: null sortDesc: false totalItems: 2 totalPages: 1 } } From Campaign Object in this View we only use name , type and gameUrl We use component \"QrCodeGenerator\" for creating QR code for campaign gameUrl","title":"QR Codes"},{"location":"admin/user-accounts/#delete-account","text":"Click \"Delete Account\" icon will trigger conformation modal. Once you confirm your action the delete request is being sent: DELETE /v1/admin/users/${id} Expected output: { data: null messages: [\"User Test Test (test@lifeinmobile.com) has been successfully deleted.\"] }","title":"Delete Account"},{"location":"campaigns/additional-sms-campaign/","text":"Additional Sms Campaign # lorem","title":"Additional SMS Campaign"},{"location":"campaigns/additional-sms-campaign/#additional-sms-campaign","text":"lorem","title":"Additional Sms Campaign"},{"location":"campaigns/campaign-builder/","text":"Campaign Builder # lorem","title":"Campaign Builder"},{"location":"campaigns/campaign-builder/#campaign-builder","text":"lorem","title":"Campaign Builder"},{"location":"campaigns/campaign-manager/","text":"Campaign Manager # lorem","title":"Campaign Manager"},{"location":"campaigns/campaign-manager/#campaign-manager","text":"lorem","title":"Campaign Manager"},{"location":"campaigns/push-your-limits/","text":"Push Your Limits # lorem","title":"Push Your Limits"},{"location":"campaigns/push-your-limits/#push-your-limits","text":"lorem","title":"Push Your Limits"},{"location":"franchises/default-franchise/","text":"Default Franchise # lorem","title":"Default"},{"location":"franchises/default-franchise/#default-franchise","text":"lorem","title":"Default Franchise"},{"location":"franchises/support-local-franchise/","text":"Supportlocal Franchise # The Franchise Sign Up Link also has a default subscription plan. For Support Local it will be the free leaderboard campaign only subscription","title":"SupportLocal"},{"location":"franchises/support-local-franchise/#supportlocal-franchise","text":"The Franchise Sign Up Link also has a default subscription plan. For Support Local it will be the free leaderboard campaign only subscription","title":"Supportlocal Franchise"},{"location":"onboarding/payment/","text":"Payment # lorem","title":"Payment"},{"location":"onboarding/payment/#payment","text":"lorem","title":"Payment"},{"location":"onboarding/sms-campaign/","text":"SMS campaign # lorem","title":"SMS Campaign"},{"location":"onboarding/sms-campaign/#sms-campaign","text":"lorem","title":"SMS campaign"},{"location":"onboarding/user-info/","text":"User info # lorem","title":"User Info"},{"location":"onboarding/user-info/#user-info","text":"lorem","title":"User info"},{"location":"user/contacts-manager/","text":"Contacts Manager # lorem","title":"Contacts Manager"},{"location":"user/contacts-manager/#contacts-manager","text":"lorem","title":"Contacts Manager"},{"location":"user/dashboard/","text":"Dashboard # The last known mockup: invisionapp Filter Range # All Dashboard components have the same filter component: DateRangeFilter Those are available options for filter: [ { title: 'Today', value: 'today', measure: 'hours', startDate: moment().format('YYYY-MM-DD'), endDate: moment().add(1, 'days').format('YYYY-MM-DD'), }, { title: 'Yesterday', value: 'yesterday', measure: 'hours', startDate: moment().subtract(1, 'days').format('YYYY-MM-DD'), endDate: moment().format('YYYY-MM-DD'), }, { title: 'Last 7 Days', value: '7_days', measure: 'weekday', startDate: moment().subtract(7, 'days').format('YYYY-MM-DD'), endDate: moment().format('YYYY-MM-DD'), }, { title: 'This Month', value: 'this_month', measure: 'days', startDate: moment().startOf('month').format('YYYY-MM-DD'), endDate: moment().format('YYYY-MM-DD'), }, { title: 'Last Month', value: 'last_month', measure: 'days', startDate: moment().subtract(1, 'months').startOf('month').format('YYYY-MM-DD'), endDate: moment().subtract(1, 'months').endOf('month').format('YYYY-MM-DD'), }, { title: 'Custom Range', value: 'custom', measure: 'custom', startDate: moment(chosenCustomDate).format('YYYY-MM-DD'), endDate: moment(chosenCustomDate).format('YYYY-MM-DD'), }, ]; Some explanation on data range logic: Today -> today will be compared to yesterday; Yesterday -> yesterday will be compared to day before (today -2days to today -1day); Last 7 days -> period of last 7 days will be compared to the previous 7 days before this period (-14 days to -7days); This month -> from the beginning of this month compared to the previous month; Last Month -> previous month is being compared to the month before; Custom range -> x days calculated form the date range compared to the x days before the beginning of this range; In Api request we use encoded format: encodeURIComponent(moment(date).toISOString()) Stats # For all stats we use same params: ?endDate=${end}&startDate=${start} In Stas boxes we also send additional param: &selectedPeriod=${val.value} - not sure it is needed Stats boxes are filtered statistics that are displaying the increase or decrease of specific contacts in chosen period. Expected output: { basePeriod: \"2020-12-01T00:00:00+0000 - 2020-12-21T23:59:59+0000\" basePeriodCount: 50003 comparablePeriod: \"2020-11-01T00:00:00+0000 - 2020-11-30T23:59:59+0000\" comparablePeriodCount: 64310 comparablePeriodDiff: -0.22246928937956773 } Attribute comparablePeriodDiff can provide both negativ or positive values. Should be multiplied by 100 to get proper % for instance: -1 * 100 = -100% or 1.345 * 100 = 123.5% New Contacts # dashboard/stats?context=new_contacts New Contacts - newly added / filled the form on game platform [NEED TO BE VERIFIED] NOTE: We should not see increase of contact if contacts were uploaded through Campaign Builder Verified Contacts # Verified Contacts - contacts whose email or phone was verified. ( like clicking in email, sending sms tp.) [NEED TO BE VERIFIED] dashboard/stats?context=verified_contacts Offers Redeemed # Offers Redeemed - contacts that redeemed at least one prize [NEED TO BE VERIFIED] dashboard/stats?context=offers_redeemed Chart # Endpoint for chart date: GET /v1/dashboard/chart?endDate=${end}&startDate=${start} Backend sends agregated data via time frames. Timeframes depend on date ranges send from frontend. Possible time frames: Quarter (15min) - when date range is about 1 day Hour (1h) - when date range is greater than 1 days and lesser than week. Day (1d) - when date range is greater than week (7 days). Expected output: { data: [ { date: \"2020-11-30T00:00:00+0000\", values: { direct: 0 email: 0 facebook: 0 instagram: 0 sms: 0 } } ], interval: \"day\" } Top Staff # Endpoint for top staff: GET /v1/dashboard/top-members?endDate=${end}&startDate=${start} Expected output: [ { clicks: \"0\" first_name: \"Jane\" id: \"231\" last_name: \"Blue\" leads: \"0\" rdms: \"0\" } ] Returns best staff members based on their shortlink and traffic due to it. For now best member is the one with highest sum of clicks, redeems and leads Recent Contacts # At this point Recent contacts are using the same endpoint as in Contacts Manager . For more information look there. GET /v1/contacts-read?filters[]=builder,eq,0 By default we use filter builder,eq,0 - if set to 0 we will not get contacts imported form Campaign Builder. Start and End date form FilterRangeComponent is used as aditional filter: filters[]=firstVisitDate,b,${start},${end} Columns are filterable and sortable, paginated from backend. We refresh table every 20 seconds. Click on each row will open Contact View; more info - Contacts Manager . Needed headers for Recent Contacts on dashboard: **Mobile #**: phone **First Name**: firstName **Last Name**: lastName **Email**: email **Source**: source **Source Campaign**: sourceCampaign **Badges**: badges **Visit Date**: lastVisitDate **Visit time**: lastVisitDate **ENGS**: engagements **RDMS**: redemptions","title":"Dashboard"},{"location":"user/dashboard/#dashboard","text":"The last known mockup: invisionapp","title":"Dashboard"},{"location":"user/dashboard/#filter-range","text":"All Dashboard components have the same filter component: DateRangeFilter Those are available options for filter: [ { title: 'Today', value: 'today', measure: 'hours', startDate: moment().format('YYYY-MM-DD'), endDate: moment().add(1, 'days').format('YYYY-MM-DD'), }, { title: 'Yesterday', value: 'yesterday', measure: 'hours', startDate: moment().subtract(1, 'days').format('YYYY-MM-DD'), endDate: moment().format('YYYY-MM-DD'), }, { title: 'Last 7 Days', value: '7_days', measure: 'weekday', startDate: moment().subtract(7, 'days').format('YYYY-MM-DD'), endDate: moment().format('YYYY-MM-DD'), }, { title: 'This Month', value: 'this_month', measure: 'days', startDate: moment().startOf('month').format('YYYY-MM-DD'), endDate: moment().format('YYYY-MM-DD'), }, { title: 'Last Month', value: 'last_month', measure: 'days', startDate: moment().subtract(1, 'months').startOf('month').format('YYYY-MM-DD'), endDate: moment().subtract(1, 'months').endOf('month').format('YYYY-MM-DD'), }, { title: 'Custom Range', value: 'custom', measure: 'custom', startDate: moment(chosenCustomDate).format('YYYY-MM-DD'), endDate: moment(chosenCustomDate).format('YYYY-MM-DD'), }, ]; Some explanation on data range logic: Today -> today will be compared to yesterday; Yesterday -> yesterday will be compared to day before (today -2days to today -1day); Last 7 days -> period of last 7 days will be compared to the previous 7 days before this period (-14 days to -7days); This month -> from the beginning of this month compared to the previous month; Last Month -> previous month is being compared to the month before; Custom range -> x days calculated form the date range compared to the x days before the beginning of this range; In Api request we use encoded format: encodeURIComponent(moment(date).toISOString())","title":"Filter Range"},{"location":"user/dashboard/#stats","text":"For all stats we use same params: ?endDate=${end}&startDate=${start} In Stas boxes we also send additional param: &selectedPeriod=${val.value} - not sure it is needed Stats boxes are filtered statistics that are displaying the increase or decrease of specific contacts in chosen period. Expected output: { basePeriod: \"2020-12-01T00:00:00+0000 - 2020-12-21T23:59:59+0000\" basePeriodCount: 50003 comparablePeriod: \"2020-11-01T00:00:00+0000 - 2020-11-30T23:59:59+0000\" comparablePeriodCount: 64310 comparablePeriodDiff: -0.22246928937956773 } Attribute comparablePeriodDiff can provide both negativ or positive values. Should be multiplied by 100 to get proper % for instance: -1 * 100 = -100% or 1.345 * 100 = 123.5%","title":"Stats"},{"location":"user/dashboard/#new-contacts","text":"dashboard/stats?context=new_contacts New Contacts - newly added / filled the form on game platform [NEED TO BE VERIFIED] NOTE: We should not see increase of contact if contacts were uploaded through Campaign Builder","title":"New Contacts"},{"location":"user/dashboard/#verified-contacts","text":"Verified Contacts - contacts whose email or phone was verified. ( like clicking in email, sending sms tp.) [NEED TO BE VERIFIED] dashboard/stats?context=verified_contacts","title":"Verified Contacts"},{"location":"user/dashboard/#offers-redeemed","text":"Offers Redeemed - contacts that redeemed at least one prize [NEED TO BE VERIFIED] dashboard/stats?context=offers_redeemed","title":"Offers Redeemed"},{"location":"user/dashboard/#chart","text":"Endpoint for chart date: GET /v1/dashboard/chart?endDate=${end}&startDate=${start} Backend sends agregated data via time frames. Timeframes depend on date ranges send from frontend. Possible time frames: Quarter (15min) - when date range is about 1 day Hour (1h) - when date range is greater than 1 days and lesser than week. Day (1d) - when date range is greater than week (7 days). Expected output: { data: [ { date: \"2020-11-30T00:00:00+0000\", values: { direct: 0 email: 0 facebook: 0 instagram: 0 sms: 0 } } ], interval: \"day\" }","title":"Chart"},{"location":"user/dashboard/#top-staff","text":"Endpoint for top staff: GET /v1/dashboard/top-members?endDate=${end}&startDate=${start} Expected output: [ { clicks: \"0\" first_name: \"Jane\" id: \"231\" last_name: \"Blue\" leads: \"0\" rdms: \"0\" } ] Returns best staff members based on their shortlink and traffic due to it. For now best member is the one with highest sum of clicks, redeems and leads","title":"Top Staff"},{"location":"user/dashboard/#recent-contacts","text":"At this point Recent contacts are using the same endpoint as in Contacts Manager . For more information look there. GET /v1/contacts-read?filters[]=builder,eq,0 By default we use filter builder,eq,0 - if set to 0 we will not get contacts imported form Campaign Builder. Start and End date form FilterRangeComponent is used as aditional filter: filters[]=firstVisitDate,b,${start},${end} Columns are filterable and sortable, paginated from backend. We refresh table every 20 seconds. Click on each row will open Contact View; more info - Contacts Manager . Needed headers for Recent Contacts on dashboard: **Mobile #**: phone **First Name**: firstName **Last Name**: lastName **Email**: email **Source**: source **Source Campaign**: sourceCampaign **Badges**: badges **Visit Date**: lastVisitDate **Visit time**: lastVisitDate **ENGS**: engagements **RDMS**: redemptions","title":"Recent Contacts"},{"location":"user/my-profile/","text":"My Profile # On user subscription, it is required to provide plan slug or ID to which Plan user is willin to opt in: POST /v1/stripe/subscribe Request JSON body: { \"paymentMethodId\": \"pm_xxxxxxxxxxxx\", \"plan\": \"my-plan-slug\" } Since now route POST /v1/stripe/subscribe allows to pass \"code\" parameter to use it, paymentMethodId is not required then.","title":"My Profile"},{"location":"user/my-profile/#my-profile","text":"On user subscription, it is required to provide plan slug or ID to which Plan user is willin to opt in: POST /v1/stripe/subscribe Request JSON body: { \"paymentMethodId\": \"pm_xxxxxxxxxxxx\", \"plan\": \"my-plan-slug\" } Since now route POST /v1/stripe/subscribe allows to pass \"code\" parameter to use it, paymentMethodId is not required then.","title":"My Profile"},{"location":"user/notifications/","text":"Notifications # lorem","title":"Notifications"},{"location":"user/notifications/#notifications","text":"lorem","title":"Notifications"},{"location":"user/short-link/","text":"Short Link # lorem","title":"Short Links"},{"location":"user/short-link/#short-link","text":"lorem","title":"Short Link"},{"location":"user/staff-members/","text":"Staff Members # lorem","title":"Staff Members"},{"location":"user/staff-members/#staff-members","text":"lorem","title":"Staff Members"},{"location":"user/winners-manager/","text":"Winners Manager # lorem","title":"Winners Manager"},{"location":"user/winners-manager/#winners-manager","text":"lorem","title":"Winners Manager"}]}